workflow:
  rules:
    # Disable merge request pipelines
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - when: always

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GH_PROJECT_PATH: "MatrixAI/${CI_PROJECT_NAME}"
  GH_PROJECT_URL: "https://${GITHUB_TOKEN}@github.com/${GH_PROJECT_PATH}.git"
  # Cache .npm
  npm_config_cache: "${CI_PROJECT_DIR}/tmp/npm"
  # Prefer offline node module installation
  npm_config_prefer_offline: "true"

default:
  interruptible: true
  before_script:
    - mkdir -p "$CI_PROJECT_DIR/tmp"

# Cached directories shared between jobs & pipelines per-branch per-runner
cache:
  key: $CI_COMMIT_REF_SLUG
  # Preserve cache even if job fails
  when: 'always'
  paths:
    - ./tmp/npm/
    - ./.docusaurus

stages:
  - check       # Linting, unit tests
  - build       # Cross-platform library compilation, unit tests
  - integration # Cross-platform application bundling, integration tests, and pre-release
  - release     # Cross-platform distribution and deployment

image: registry.gitlab.com/matrixai/engineering/maintenance/gitlab-runner

check:lint:
  stage: check
  needs: []
  script:
    - >
      nix-shell --arg ci true --run $'
      npm run lint;
      '
  rules:
    # Runs on feature and staging commits
    - if: $CI_COMMIT_BRANCH =~ /^(?:feature.*|staging)$/

check:build:
  stage: check
  needs: []
  script:
    - echo 'Perform build'
    - >
      nix-shell --arg ci true --run $'
      npm run build;
      '
  artifacts:
    when: always
    paths:
      - ./public
  rules:
    # Runs on feature, staging and master commits
    - if: $CI_COMMIT_BRANCH =~ /^(?:feature.*|staging)$/

check:deployment:
  stage: check
  needs:
    - check:build
  # Don't interrupt deploying job
  interruptible: false
  # Requires mutual exclusion
  resource_group: check:deployment
  environment:
    name: "feature/$CI_COMMIT_REF_SLUG"
    url: "https://$CI_COMMIT_REF_SLUG.dev.polykey.com/docs/"
    deployment_tier: 'development'
    on_stop: check:deployment:stop
    auto_stop_in: 1 week
  script:
    - echo 'Perform service deployment for feature'
    - >
      nix-shell --arg ci true --run $'
      npm run deploy -- \
        --feature "$CI_COMMIT_REF_SLUG" \
        --env "$CI_COMMIT_REF_SLUG";
      '
  rules:
    # Runs on feature commits
    - if: $CI_COMMIT_BRANCH =~ /^feature.*$/

check:deployment:stop:
  stage: check
  # Don't interrupt deploying job
  interruptible: false
  # Requires mutual exclusion
  resource_group: check:deployment:stop
  environment:
    name: "feature/$CI_COMMIT_REF_SLUG"
    action: stop
  script:
    - echo 'Perform service deployment for feature'
    - >
      nix-shell --arg ci true --run $'
      wrangler delete --name "polykey-docs-dev-$CI_COMMIT_REF_SLUG" --force;
      '
  rules:
    # Manually runnable on feature commits
    - if: $CI_COMMIT_BRANCH =~ /^feature.*$/
      when: manual

build:merge:
  stage: build
  needs: []
  # Requires mutual exclusion
  resource_group: build:merge
  script:
    # Required for `gh pr create`
    - git remote add upstream "$GH_PROJECT_URL"
    - >
      nix-shell --arg ci true --run $'
      gh pr create \
        --head staging \
        --base master \
        --title "ci: merge staging to master" \
        --body "This is an automatic PR generated by the pipeline CI/CD. This will be automatically fast-forward merged if successful." \
        --assignee "@me" \
        --no-maintainer-edit \
        --repo "$GH_PROJECT_PATH" || true;
      printf "Pipeline Attempt on ${CI_PIPELINE_ID} for ${CI_COMMIT_SHA}\n\n${CI_PIPELINE_URL}" \
      | gh pr comment staging \
        --body-file - \
        --repo "$GH_PROJECT_PATH";
      '
  rules:
    # Runs on staging commits
    - if: $CI_COMMIT_BRANCH == 'staging'

integration:deployment:
  stage: integration
  needs:
    - check:build
  # Don't interrupt deploying job
  interruptible: false
  # Requires mutual exclusion
  resource_group: integration:deployment
  environment:
    name: 'staging'
    url: 'https://staging.polykey.com/docs/'
    deployment_tier: 'staging'
  script:
    - echo 'Perform service deployment for staging'
    - >
      nix-shell --arg ci true --run $'
      npm run deploy -- --env staging;
      '
  rules:
    # Runs on staging commits
    - if: $CI_COMMIT_BRANCH == 'staging'

integration:merge:
  stage: integration
  needs:
    - build:merge
    - integration:deployment
  # Requires mutual exclusion
  resource_group: integration:merge
  variables:
    # Ensure that CI/CD is fetching all commits
    # this is necessary to checkout origin/master
    # and to also merge origin/staging
    GIT_DEPTH: 0
  script:
    - >
      nix-shell --arg ci true --run $'
      printf "Pipeline Succeeded on ${CI_PIPELINE_ID} for ${CI_COMMIT_SHA}\n\n${CI_PIPELINE_URL}" \
      | gh pr comment staging \
        --body-file - \
        --repo "$GH_PROJECT_PATH";
      '
    - git remote add upstream "$GH_PROJECT_URL"
    - git checkout origin/master
    # Merge up to the current commit (not the latest commit)
    - git merge --ff-only "$CI_COMMIT_SHA"
    - git push upstream HEAD:master
  rules:
    # Runs on staging commits
    - if: $CI_COMMIT_BRANCH == 'staging'

release:deployment:
  stage: release
  # Only needs check:build from the staging branch pipeline
  needs:
    - project: $CI_PROJECT_PATH
      job: check:build
      ref: staging
      artifacts: true
  # Don't interrupt deploying job
  interruptible: false
  # Requires mutual exclusion
  resource_group: release:deployment
  environment:
    name: 'production'
    url: 'https://polykey.com/docs/'
    deployment_tier: 'production'
  script:
    - echo 'Perform service deployment for production'
    - >
      nix-shell --arg ci true --run $'
      npm run deploy -- --env production;
      '
  rules:
    # Runs on master commits
    - if: $CI_COMMIT_BRANCH == 'master'
